package com.ryan.algorithm.string.leetcode8;

import java.util.HashMap;

/**
 * 请你来实现一个myAtoi(string s)函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
 * <p>
 * 函数myAtoi(string s) 的算法如下：
 * <p>
 * 读入字符串并丢弃无用的前导空格
 * 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
 * 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
 * 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
 * 如果整数数超过 32 位有符号整数范围 [−231, 231− 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231− 1 的整数应该被固定为 231− 1 。
 * 返回整数作为最终结果。
 * 注意：
 * <p>
 * 本题中的空白字符只包括空格字符 ' ' 。
 * 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
 * <p>
 * 示例 1：
 * 输入：s = "42"
 * 输出：42
 * 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
 * 第 1 步："42"（当前没有读入字符，因为没有前导空格）
 * ^
 * 第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
 * ^
 * 第 3 步："42"（读入 "42"）
 * ^
 * 解析得到整数 42 。
 * 由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。
 * <p>
 * 示例 2：
 * 输入：s = "   -42"
 * 输出：-42
 * 解释：
 * 第 1 步："   -42"（读入前导空格，但忽视掉）
 * ^
 * 第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）
 * ^
 * 第 3 步："   -42"（读入 "42"）
 * ^
 * 解析得到整数 -42 。
 * 由于 "-42" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。
 * <p>
 * 示例 3：
 * 输入：s = "4193 with words"
 * 输出：4193
 * 解释：
 * 第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）
 * ^
 * 第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
 * ^
 * 第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）
 * ^
 * 解析得到整数 4193 。
 * 由于 "4193" 在范围 [-231, 231 - 1] 内，最终结果为 4193 。
 * <p>
 * 提示：
 * 0 <= s.length <= 200
 * s 由英文字母（大写和小写）、数字（0-9）、' '、'+'、'-' 和 '.' 组成
 *
 * @author ryanzou
 */
public class Solution {

    public int myAtoi(String s) {
        int res = 0;
        s = s.trim();
        if (s.length() < 1) {
            return res;
        }
        boolean isNative = s.charAt(0) == 45;
        boolean isFirstZero = true;
        for (int i = 0; i < s.length(); i++) {
            int charVal = s.charAt(i);
            int num = charVal - 48;
            // 符号位直接跳过
            if (i == 0 && (charVal == 43 || charVal == 45)) {
                continue;
            }
            // 判断是否位首位连续0
            if (num != 0 && isFirstZero) {
                isFirstZero = false;
            }
            // 首次00位跳过
            if (isFirstZero) {
                continue;
            }
            // 非数字直接返回
            if (num < 0 || num > 9) {
                break;
            }
            // 正数越界直接返回正数最大值
            if (!isNative && (res > 214748364 || (res == 214748364 && num > 7))) {
                return 2147483647;
            }
            //负数越界直接返回负数最大值
            if (isNative && (res > 214748364 || (res == 214748364 && num >= 8))) {
                return -2147483648;
            }
            res = res * 10 + num;
        }
        return isNative ? -res : res;
    }

    public static void main(String[] args) {
        int max = (new Solution()).myAtoi(" -1010023630o4");
        System.out.println(max);
    }

}
